from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
from launch_ros.substitutions import FindPackageShare
from launch_ros.actions import ComposableNodeContainer
from launch_ros.descriptions import ComposableNode
import os
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import GroupAction
from launch_ros.actions import PushRosNamespace

def generate_launch_description():

  ld = LaunchDescription()
  odom_topic = LaunchConfiguration('odom')
  so3_cmd_topic = LaunchConfiguration('so3_cmd')

  robot_arg = DeclareLaunchArgument(
    'robot', default_value='quadrotor'
  )
  odom_arg = DeclareLaunchArgument(
    'odom', default_value='odom'
  )
  so3_cmd_arg = DeclareLaunchArgument(
    'so3_cmd', default_value='so3_cmd'
  )

  # Path to the configuration file
  config_file = FindPackageShare('kr_crazyflie_interface').find('kr_crazyflie_interface') + '/config/crazyflie.yaml'
  
  mav_services_node = Node(
      package="kr_mav_manager",
      executable="mav_services",
      namespace=LaunchConfiguration('robot'),
      name="mav_services",
      output='screen'
  )

  rqt_gui_node = Node(
      package="rqt_mav_manager",
      executable="rqt_mav_manager",
      namespace=LaunchConfiguration('robot'),
      name="rqt_mav",
      output='screen',
  )
  
  trackers_manager_config_file = FindPackageShare('kr_trackers_manager').find('kr_trackers_manager') + '/config/trackers_manager.yaml'
  print(trackers_manager_config_file)

  trackers_manager_launch_path = os.path.join(
        FindPackageShare('kr_trackers_manager').find('kr_trackers_manager'),
        'launch',
        'example.launch.py'
  )
    
  # Include the trackers manager launch file
  trackers_component = IncludeLaunchDescription(
      PythonLaunchDescriptionSource(trackers_manager_launch_path),
      launch_arguments={
          'trackers_manager_config_file': config_file
          }.items()
  )

  trackers_component_with_namespace = GroupAction(
     actions=[
         PushRosNamespace(LaunchConfiguration('robot')),
         trackers_component,
      ]
   ) 

  # Component configuration
  so3cmd_to_crazyflie_component = ComposableNodeContainer(
    name="so3_container",
    namespace=LaunchConfiguration('robot'),
    package="rclcpp_components",
    executable="component_container",
    composable_node_descriptions=[
      ComposableNode(
        package="kr_crazyflie_interface",
        plugin="SO3CmdToCrazyflie",
        name="so3cmd_to_crazyflie",
        parameters=[config_file],
        remappings=[
          ("~/odom", odom_topic),
          ("~/so3_cmd", so3_cmd_topic)
        ]
      )
    ],
    output='screen'
  )
    # Regular Node (not in container)


  return LaunchDescription([
      robot_arg,
      # odom_arg,
      # so3_cmd_arg,
      # so3cmd_to_crazyflie_component,
      # mav_services_node,
      # rqt_gui_node,
      trackers_component_with_namespace,

  ])
